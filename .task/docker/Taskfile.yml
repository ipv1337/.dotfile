# https://taskfile.dev

version: '3'

tasks:

  default:
    desc: List all docker tasks
    prefix: ⚙️ 
    cmds:
      - task {{default "--list" .CLI_ARGS}} | grep --color=always 'docker:'


  info:
    desc: Display cluster info
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      - docker info

  images:
    desc: List images
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      - docker images

  images-prune:
    desc: Prune images
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      - docker image prune -a

  image-inspect:
    desc: Inspect image
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      - docker image inspect {{.CLI_ARGS}}


  system-prune:
    desc: Prune all
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      - docker system prune -a


  tfdkr-init:
    desc: Run terraform in current directory
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      - |
        docker run --rm -it \
        -u 501 \
        -v $PWD:/workspace \
        -v $HOME/.terraform.d:/root/.terraform.d \
        -v $HOME/.ssh:/root/.ssh \
        -w /workspace \
        -e TF_CLI_CONFIG_FILE=/workspace/.terraformrc \
        --entrypoint /usr/bin/env \
        hashicorp/terraform:latest terraform -chdir='{{.CLI_ARGS}}' init

  # tfdkr-plan:
  #   desc: Run terraform in current directory
  #   dir: '{{.USER_WORKING_DIR}}'
  #   cmds:
  #     - |
  #       docker run --rm -it \
  #       -u 501 \
  #       -v $PWD:/workspace \
  #       -v $HOME/.terraform.d:/root/.terraform.d \
  #       -v $HOME/.ssh:/root/.ssh \
  #       -w /workspace \
  #       -e TF_CLI_CONFIG_FILE=/workspace/.terraformrc \
  #       --entrypoint /usr/bin/env \
  #       hashicorp/terraform:latest terraform -chdir='{{.CLI_ARGS}}' init && terraform -chdir='{{.CLI_ARGS}}' plan

  tfdkr-plan:
    desc: Run terraform in current directory
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      - |
        docker run --rm -it \
        -u 501 \
        -v $PWD:/workspace \
        -v $HOME/.terraform.d:/root/.terraform.d \
        -v $HOME/.ssh:/root/.ssh \
        -w /workspace \
        -e TF_CLI_CONFIG_FILE=/workspace/.terraformrc \
        --entrypoint /usr/bin/env \
        hashicorp/terraform:latest terraform -chdir='{{.CLI_ARGS}}' plan

  tfdkr-fmt:
    desc: Run terraform in current directory
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      - |
        docker run --rm -it \
        -u 501 \
        -v $PWD:/workspace \
        -v $HOME/.terraform.d:/root/.terraform.d \
        -v $HOME/.ssh:/root/.ssh \
        -w /workspace \
        -e TF_CLI_CONFIG_FILE=/workspace/.terraformrc \
        --entrypoint /usr/bin/env \
        hashicorp/terraform:latest terraform -chdir='{{.CLI_ARGS}}' fmt

  tfdkr-state-ls:
    desc: Run terraform in current directory
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      - |
        docker run --rm -it \
        -u 501 \
        -v $PWD:/workspace \
        -v $HOME/.terraform.d:/root/.terraform.d \
        -v $HOME/.ssh:/root/.ssh \
        -w /workspace \
        -e TF_CLI_CONFIG_FILE=/workspace/.terraformrc \
        --entrypoint /usr/bin/env \
        hashicorp/terraform:latest terraform -chdir='{{.CLI_ARGS}}' state list

  tfdkr-state-save:
    desc: Run terraform in current directory
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      - |
        docker run --rm -it \
        -u 501 \
        -v $PWD:/workspace \
        -v $HOME/.terraform.d:/root/.terraform.d \
        -v $HOME/.ssh:/root/.ssh \
        -w /workspace \
        -e TF_CLI_CONFIG_FILE=/workspace/.terraformrc \
        --entrypoint /usr/bin/env \
        hashicorp/terraform:latest terraform -chdir='{{.CLI_ARGS}}' state pull > terraform.tfstate


  tfdkr-run:
    desc: Run terraform in current directory
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      - |
        docker run --rm -it \
        -u 501 \
        -v $PWD:/workspace \
        -v $HOME/.terraform.d:/root/.terraform.d \
        -v $HOME/.ssh:/root/.ssh \
        -w /workspace \
        -e TF_CLI_CONFIG_FILE=/workspace/.terraformrc \
        --entrypoint /usr/bin/env \
        hashicorp/terraform:latest terraform {{.CLI_ARGS}}

  sk-run:
    desc: Run skaffold in current directory
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      # https://github.com/GoogleContainerTools/skaffold/issues/4033
      # - docker run --rm -v $(pwd):/app -w /app gcr.io/k8s-skaffold/skaffold:latest {{.CLI_ARGS}}
      # https://images.chainguard.dev/directory/image/skaffold/overview
      - docker run --rm -v $(pwd):/app -w /app cgr.dev/chainguard/skaffold:latest {{.CLI_ARGS}}

  bz-run:
    desc: Run bazel in current directory
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      # https://images.chainguard.dev/directory/image/bazel/overview
      - docker run --rm --entrypoint bash -v $(pwd):/home/bazel cgr.dev/chainguard/bazel:latest -- bazel {{.CLI_ARGS}}


  bu-run:
    desc: Run butane in currect directory
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      # https://docs.fedoraproject.org/en-US/fedora-coreos/producing-ign/
      - |
        docker run --interactive --rm --security-opt label=disable \
        --volume $(pwd):/pwd --workdir /pwd quay.io/coreos/butane:release \
        --pretty --strict my_config.bu > transpiled_config.ign


  openapi-generator-run:
    desc: Run openapi-generator in current directory
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      # https://openapi-generator.tech/
      # https://hub.docker.com/u/openapitools
      - docker run --rm -v $(pwd):/local openapitools/openapi-generator-cli generate -i /local/{{.CLI_ARGS}} -g go -o /local/out/go


  stripe-run:
    desc: Run stripe in current directory
    dir: '{{.USER_WORKING_DIR}}}'
    cmds:
      # - docker run --rm -it stripe/stripe-cli:latest customers list --api-key sk_test_51PZleGCMY5ml3pDvjOyLkwBpZegXFhyPyZAcwzrnxfYGyAvvPlm3qfKHOvKnrsYHucsFI36mrd8SXJHeXnK2HSqG00W8yL5oMT
      # - docker run --rm -v $(pwd):/app -w /app stripe/stripe-cli {{.CLI_ARGS}}
      - docker run --rm -it stripe/stripe-cli:latest {{.CLI_ARGS}}


  debug-amd64-build:
    desc: Build x86_64 debug container
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      - |
        docker buildx build . \
        --platform linux/x86_64 \
        -t debug \
        -f Dockerfile.debug

  debug-amd64-run:
    desc: Run x86_64 debug container
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      - |
        docker run --rm -it \
        --privileged \
        --platform linux/x86_64 \
        debug bash

  debug-fedora-amd64-run:
    desc: Run x86_64 debug container
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      - |
        docker run --rm -it \
        -u 501 \
        -v '{{.USER_WORKING_DIR}}':/data \
        --platform linux/x86_64 \
        amd64/fedora:latest sh

        # https://github.com/GoogleContainerTools/kaniko?tab=readme-ov-file#running-kaniko-in-docker
        #docker run \
        #    -v "$HOME"/.config/gcloud:/root/.config/gcloud \
        #    -v /path/to/context:/workspace \
        #    gcr.io/kaniko-project/executor:latest \
        #    --dockerfile /workspace/Dockerfile \
        #    --destination "gcr.io/$PROJECT_ID/$IMAGE_NAME:$TAG" \
        #    --context dir:///workspace/


  open:
    desc: Open docker taskfile
    prefix: ⚙️
    cmds:
      - open {{.HOME}}/.task/docker/Taskfile.yml
    silent: true
